program = _{
    SOI ~
    (staticDeclaration | constDeclaration | functionDeclaration)* ~
    EOI
}

staticDeclaration = { "static" ~ space ~ identifier ~ ":" ~ variableType ~ "=" ~ expression ~ ";"  }

constDeclaration = { "const" ~ space ~ identifier ~ ":" ~ variableType ~ "=" ~ expression ~ ";"  }

functionDeclaration = {
    "function" ~
    space ~
    identifier ~
    "(" ~
    functionArgs? ~
    ")" ~
    functionReturn? ~
    "{" ~
    functionBody ~
    "}"
}

functionArgs = {
    functionArg ~ "," ~ functionArg* ~ ","?
}

functionReturn = {
    "->" ~ variableType
}

functionArg = { identifier ~ ":" ~ variableType }

functionBody = { functionStatement+ }

functionStatement = _{
    createSetVariable
    | createVariable
    | ifStatement
    | setVariable
}

createVariable = { "let" ~ space ~ identifier ~ ":" ~ variableType ~ ";" }

createSetVariable = { "let" ~ space ~ identifier ~ ":" ~ variableType ~ "=" ~ expression ~ ";" }

setVariable = { identifier ~ "=" ~ expression ~ ";" }

ifStatement = {
    "if" ~
    expression ~
    "{" ~
    functionBody ~
    "}" ~
    ifElse?
}

ifElse = {
    "else" ~
    (
        ifStatement
        | (
            "{" ~
            functionBody ~
            "}"
        )
    )
}

variableType = { "u32" | "bool" | "()" }

expression = { logical }

logical = {
    comparison ~ logicalOp ~ logical
    | comparison
}

comparison = {
    addition ~ comparisonOp ~ comparison
    | addition
}

addition = {
    multiplication ~ additionOp ~ addition
    | multiplication
}

multiplication = {
    primary ~ multiplicationOp ~ multiplication
    | primary
}

primary = {
    number | boolLiteral | identifier | "(" ~ expression ~ ")"
}

logicalOp = { "&&" | "||" }

comparisonOp = { "!=" | "==" | ">=" | "<=" | ">" | "<" }

additionOp = { "+" | "-" }

multiplicationOp = { "*" | "/" }

identifier = @{
    (ASCII_ALPHA | "_") ~
    (ASCII_ALPHA | ASCII_DIGIT | "_")*
}

number = @{
    "-"? ~
    ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~
    ("." ~ ASCII_DIGIT*)?
}

boolLiteral = { "true" | "false" }

space = _{ WHITESPACE* }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }